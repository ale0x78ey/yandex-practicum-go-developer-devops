// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package storagemock is a generated GoMock package.
package storagemock

import (
	context "context"
	reflect "reflect"

	model "github.com/ale0x78ey/yandex-practicum-go-developer-devops/model"
	gomock "github.com/golang/mock/gomock"
)

// MockMetricStorer is a mock of MetricStorer interface.
type MockMetricStorer struct {
	ctrl     *gomock.Controller
	recorder *MockMetricStorerMockRecorder
}

// MockMetricStorerMockRecorder is the mock recorder for MockMetricStorer.
type MockMetricStorerMockRecorder struct {
	mock *MockMetricStorer
}

// NewMockMetricStorer creates a new mock instance.
func NewMockMetricStorer(ctrl *gomock.Controller) *MockMetricStorer {
	mock := &MockMetricStorer{ctrl: ctrl}
	mock.recorder = &MockMetricStorerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricStorer) EXPECT() *MockMetricStorerMockRecorder {
	return m.recorder
}

// LoadMetric mocks base method.
func (m *MockMetricStorer) LoadMetric(ctx context.Context, metricType model.MetricType, metricName model.MetricName) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadMetric", ctx, metricType, metricName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadMetric indicates an expected call of LoadMetric.
func (mr *MockMetricStorerMockRecorder) LoadMetric(ctx, metricType, metricName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadMetric", reflect.TypeOf((*MockMetricStorer)(nil).LoadMetric), ctx, metricType, metricName)
}

// LoadMetricList mocks base method.
func (m *MockMetricStorer) LoadMetricList(ctx context.Context) ([]*model.Metric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadMetricList", ctx)
	ret0, _ := ret[0].([]*model.Metric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadMetricList indicates an expected call of LoadMetricList.
func (mr *MockMetricStorerMockRecorder) LoadMetricList(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadMetricList", reflect.TypeOf((*MockMetricStorer)(nil).LoadMetricList), ctx)
}

// SaveMetric mocks base method.
func (m *MockMetricStorer) SaveMetric(ctx context.Context, metric *model.Metric) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveMetric", ctx, metric)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveMetric indicates an expected call of SaveMetric.
func (mr *MockMetricStorerMockRecorder) SaveMetric(ctx, metric interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveMetric", reflect.TypeOf((*MockMetricStorer)(nil).SaveMetric), ctx, metric)
}
